
"""
	Here we dig through the XML file generated by Talend
"""


# Find out where we are
import os
import xml.etree.ElementTree as ET


print "Path:\t\t",os.getcwd()
print "Filename:\t",__file__
print "\n"
# filename = os.path.join(dir, '/export/')


"""
	The export of the Talend Contexts should have a similar format to:
	<project name>/<contexts>/<yourContextFoldersAndFiles>
"""

wanted_environment = 'execution_server'
output = []
filelocs = []
ignored = []

def select_context_parameters(subtree):
	context_parameters = subtree.findall('contextParameter')
	result = [node for node in context_parameters if 'value' in node.attrib]
	return result

def get_key_value_pairs(context_parameters):
	return [(param.attrib['name'], param.attrib['value']) for param in context_parameters]

def parse_talend_file(file_location):
	tree = ET.parse(fileloc)
	root = tree.getroot()

	xpath = "*[@name='%s']" % (wanted_environment,)
	environment = root.findall(xpath)
	defaults = root.findall("*[@name='Default']")

	if not environment and not defaults:
		return []

	selected_subtree = environment[0] if environment else defaults[0]
	context_parameters = select_context_parameters(selected_subtree)
	key_value_pairs = get_key_value_pairs(context_parameters)

	return key_value_pairs




"""
	Go through all files 
"""
for root, dirs, files in os.walk("export/"):
	if dirs != 'experian':
		for file in files:
			if file.endswith(".item"):
				#print os.path.join(root, file)
				fileloc =  os.path.join(root, file)
				#print "fileloc:\t\t",fileloc
				
				context_parameters = parse_talend_file(fileloc)
				if context_parameters:
					output.append((file, context_parameters)) 
				else:
					ignored.append(file)

				filelocs.append(file)

#print filelocs


			
"""
	Write to file
"""
file = open("context.properties","w+b")
for item in output:
	#print item
	file.write("# %s" % (item[0],))
	file.write('\n')
	file.write('\n')

	for context_param in item[1]:
		file.write("%s=%s" % (context_param[0], context_param[1]))
		file.write('\n')

	file.write('\n')

file.write('# Ignored:\n\n')
for f in ignored:
	file.write('# %s' % (f,))
	file.write('\n')
file.close()

